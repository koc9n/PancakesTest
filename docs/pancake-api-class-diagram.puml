@startuml PancakeLab_Class_Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 10

package "Main Application" {
    class Main {
        +main(String[] args): void
    }

    class Configuration {
        -instance: Configuration
        -properties: Properties
        +getInstance(): Configuration
        +getServerPort(): int
        +getThreadPoolSize(): int
        +getRequestTimeoutMs(): int
        +getServerBacklogSize(): int
        +getShutdownTimeoutSeconds(): int
    }
}

package "HTTP Layer" {
    class PancakeHttpServer {
        -server: HttpServer
        -executor: ExecutorService
        -config: Configuration
        +PancakeHttpServer(int, int, ServiceFactory)
        +start(): void
        +stop(): void
        -createExecutor(int): ExecutorService
    }

    class ApiHandler {
        -router: Router
        -rateLimiter: RateLimiter
        +ApiHandler(ServiceFactory)
        +handle(HttpExchange): void
        -setupRoutes(OrderController, PancakeController): void
    }

    class Router {
        -routes: List<Route>
        +addRoute(String, String, RouteHandler): void
        +handleRequest(HttpExchange): boolean
        -compilePattern(String): Pattern
        -extractParamNames(String): List<String>
        -extractPathParams(Matcher, List<String>): Map<String, String>
    }

    class TimeoutHandler {
        -delegate: HttpHandler
        -timeoutMs: long
        +handle(HttpExchange): void
    }

    class RateLimiter {
        -requestWindows: Map<String, RequestWindow>
        -maxRequestsPerMinute: int
        +allowRequest(String): boolean
        -cleanup(): void
    }

    class HttpUtils {
        +sendJson(HttpExchange, int, Object): void
        +sendError(HttpExchange, int, String): void
        +sendEmpty(HttpExchange, int): void
        +getQueryParam(HttpExchange, String): String
    }

    class JsonUtil {
        +fromJson(HttpExchange, Class<T>): T
        +fromJson(String, Class<T>): T
        +serialize(Object): byte[]
        +toJson(Object): String
    }
}

package "Controllers" {
    class OrderController {
        -orderService: OrderService
        +createOrder(HttpExchange, Map): void
        +getAllOrders(HttpExchange, Map): void
        +getOrder(HttpExchange, Map): void
        +deleteOrder(HttpExchange, Map): void
        +completeOrder(HttpExchange, Map): void
        +prepareOrder(HttpExchange, Map): void
        +startDelivery(HttpExchange, Map): void
        +cancelOrder(HttpExchange, Map): void
    }

    class PancakeController {
        -pancakeService: PancakeService
        +createPancake(HttpExchange, Map): void
        +getPancakes(HttpExchange, Map): void
        +deletePancake(HttpExchange, Map): void
        +addIngredient(HttpExchange, Map): void
        +removeIngredient(HttpExchange, Map): void
    }
}

package "DTOs" {
    class CreateOrderRequest <<record>> {
        +building(): int
        +room(): int
    }

    class OrderResponse <<record>> {
        +orderId(): UUID
        +building(): int
        +room(): int
        +state(): OrderState
        +pancakes(): List<PancakeResponse>
        +fromOrder(Order): OrderResponse
    }

    class PancakeResponse <<record>> {
        +id(): UUID
        +ingredients(): List<IngredientResponse>
        +fromPancake(Pancake): PancakeResponse
    }

    class IngredientResponse <<record>> {
        +id(): UUID
        +name(): String
        +from(Ingredient): IngredientResponse
    }

    class AddIngredientRequest <<record>> {
        +name(): String
    }
}

package "Validation" {
    class RequestValidator {
        +validateCreateOrder(CreateOrderRequest): void
        +validateAddIngredient(AddIngredientRequest): void
        +validateUUID(String, String): UUID
    }

    class ValidationException extends RuntimeException {
        -statusCode: int
        +ValidationException(String)
        +ValidationException(String, int)
        +getStatusCode(): int
    }
}

package "Service Layer" {
    class ServiceFactory {
        -orderService: OrderService
        -pancakeService: PancakeService
        +getOrderService(): OrderService
        +getPancakeService(): PancakeService
    }

    interface OrderService {
        +createOrder(int, int): Order
        +getOrder(UUID): Optional<Order>
        +getAllOrders(): List<Order>
        +getOrdersByState(OrderState): List<Order>
        +completeOrder(UUID): void
        +prepareOrder(UUID): void
        +startDelivery(UUID): void
        +cancelOrder(UUID): void
        +deleteOrder(UUID): void
    }

    class OrderServiceImpl {
        -orders: ConcurrentHashMap<UUID, Order>
        +createOrder(int, int): Order
        +getOrder(UUID): Optional<Order>
        +getAllOrders(): List<Order>
        +getOrdersByState(OrderState): List<Order>
        +completeOrder(UUID): void
        +prepareOrder(UUID): void
        +startDelivery(UUID): void
        +cancelOrder(UUID): void
        +deleteOrder(UUID): void
        -updateOrderState(UUID, OrderState): void
        -validateStateTransition(OrderState, OrderState): void
    }

    interface PancakeService {
        +createPancake(UUID): UUID
        +getPancake(UUID, UUID): Optional<Pancake>
        +getPancakesByOrder(UUID): List<Pancake>
        +addIngredientToPancake(UUID, UUID, Ingredient): Ingredient
        +removeIngredientFromPancake(UUID, UUID, UUID): void
        +removePancake(UUID, UUID): void
    }

    class PancakeServiceImpl {
        -orderService: OrderService
        +createPancake(UUID): UUID
        +getPancake(UUID, UUID): Optional<Pancake>
        +getPancakesByOrder(UUID): List<Pancake>
        +addIngredientToPancake(UUID, UUID, Ingredient): Ingredient
        +removeIngredientFromPancake(UUID, UUID, UUID): void
        +removePancake(UUID, UUID): void
    }
}

package "Model Layer" {
    class Order {
        -id: UUID
        -building: int
        -room: int
        -pancakes: List<Pancake>
        -state: OrderState
        +Order(int, int)
        +getId(): UUID
        +getBuilding(): int
        +getRoom(): int
        +getState(): OrderState
        +compareAndSetState(OrderState, OrderState): boolean
        +getPancakes(): List<Pancake>
        +addPancake(Pancake): void
        +removePancake(UUID): void
        +getPancake(UUID): Optional<Pancake>
    }

    enum OrderState {
        OPEN
        COMPLETED
        PREPARED
        OUT_FOR_DELIVERY
        CANCELLED
    }

    class Pancake {
        -id: UUID
        -ingredients: List<Ingredient>
        +Pancake()
        +getId(): UUID
        +ingredients(): List<Ingredient>
        +addIngredient(Ingredient): void
        +removeIngredient(UUID): void
        +description(): String
    }

    class Ingredient {
        -id: UUID
        -name: String
        +Ingredient(String)
        +getId(): UUID
        +getName(): String
    }
}

package "Utilities" {
    class Logger {
        +info(String, Object[]): void
        +error(String, Object[]): void
        +warn(String, Object[]): void
        +debug(String, Object[]): void
    }
}

' Relationships
Main --> PancakeHttpServer
Main --> ServiceFactory
PancakeHttpServer --> ApiHandler
PancakeHttpServer --> TimeoutHandler
PancakeHttpServer --> Configuration
ApiHandler --> Router
ApiHandler --> RateLimiter
ApiHandler --> OrderController
ApiHandler --> PancakeController
OrderController --> OrderService
PancakeController --> PancakeService
ServiceFactory --> OrderServiceImpl
ServiceFactory --> PancakeServiceImpl
OrderServiceImpl ..|> OrderService
PancakeServiceImpl ..|> PancakeService
PancakeServiceImpl --> OrderService
OrderServiceImpl --> Order
Order --> Pancake
Order --> OrderState
Pancake --> Ingredient
OrderController --> RequestValidator
PancakeController --> RequestValidator
OrderController --> OrderResponse
OrderController --> CreateOrderRequest
PancakeController --> PancakeResponse
PancakeController --> AddIngredientRequest
RequestValidator --> ValidationException

note top of Order
  Simplified concurrency:
  Using synchronized methods
  instead of complex atomic operations
end note

note top of Router
  Router-based architecture:
  Named path parameters
  Clean separation of concerns
end note

note top of ApiHandler
  Replaces old OrderHandler:
  Controller-based routing
  Centralized error handling
end note

@enduml
